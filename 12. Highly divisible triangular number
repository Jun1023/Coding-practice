# The sequence of triangle numbers is generated by adding the natural numbers.
# 자연수를 더하면 삼각형 번호의 순서가 생성된다.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 따라서 7번째 삼각형 번호는 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28이 될 것이다. 첫 10개 조건은 다음과 같다.
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
# 처음 7개의 삼각형 숫자의 요인을 나열해 보자.
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# 우리는 28이 약수가 다섯개가 넘는 최초의 삼각형 숫자임을 알 수 있다.
# What is the value of the first triangle number to have over five hundred divisors?
# 약수가 5백개가 넘는 첫 삼각형 숫자는?

ℹ)

import time

def num_divisors(n):
    if n % 2 == 0: n = n / 2
    divisors = 1
    count = 0
    while n % 2 == 0:
        count += 1
        n = n / 2
    divisors = divisors * (count + 1)
    p = 3
    while n != 1:
        count = 0
        while n % p == 0:
            count += 1
            n = n / p
        divisors = divisors * (count + 1)
        p += 2
    return divisors

def find_triangular_index(factor_limit):
    n = 1
    lnum, rnum = num_divisors(n), num_divisors(n + 1)
    while lnum * rnum < 500:
        n += 1
        lnum, rnum = rnum, num_divisors(n + 1)
    return n

start = time.time()
index = find_triangular_index(500)
triangle = (index * (index + 1)) / 2
elapsed = (time.time() - start)

print("result %s returned in %s seconds." % (triangle, elapsed))

# Answer : 76576500

### I've been studying Python, but I've found that there's still a lot to be desired.
   I will study hard until I can solve these types of problems easily.

# I got help : https: // lifeisforu.tistory.com / 435
